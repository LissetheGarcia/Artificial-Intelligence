from random import sample, randint, seed, choice
from matplotlib.pyplot import figure
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np

# PROGRAM FLAGS
SEED = 7
POP_SIZE = 1500
GENERATIONS = 150
TOURNAMENT_PERCENTAGE = 0.05
MUTATION = True
MUTATION_PERCENTAGE = 0.2
ELITISM = False
mem = 9
parameters = (mem*mem)*3 + mem*4 #((mem-1)*(mem-1))*3 + (mem-1)*4

# Coefficients Order Example for Fuzzy Sets
"""
coefs = [
  5,   2,         # m4, de4
  10,  2,         # m5, de5
  15,  2,         # m6, de6
  5,   2,         # m1, de1
  0,   0,   0,    # p1, q1, r1       
  0,   0,   0,    # p2, q2, r2
  0,   0,   0,    # p3, q3, r3
  10,  2,         # m2, de2
  0,   0,   0,    # p4, q4, r4
  10,  300, 0,    # p5, q5, r5
  0,   0,   0,    # p6, q6, r6
  15,  2,         # m3, de3
  0,   0,   0,    # p7, q7, r7
  0,   0,   0,    # p8, q8, r8 
  0,   0,   0     # p9, q9, r9
]
"""

# X = Years
YEARS = [ 1991,	1995,	2000,	2005,	2010,	2011,	2012,	2013,	2014,	2015,	2016,	2017,	2018,	2019,	2020,	2021,	2022 ]

# Y = States
STATES = [
  'Baja California Sur', 'Tabasco', 'Tamaulipas', 'Campeche', 'Guanajuato', 'Aguascalientes', 'Nuevo León', 'Colima', 'Yucatán',
  'Sonora', 'Sinaloa', 'Querétaro', 'San Luis Potosí', 'Coahuila', 'Quintana Roo', 'Nayarit', 'Zacatecas', 'Baja California',
  'Hidalgo', 'Morelos', 'Veracruz', 'Guerrero','Oaxaca', 'Tlaxcala', 'Durango', 'Chiapas', 'Puebla', 'Jalisco',
  'Chihuahua', 'Michoacán', 'Ciudad de México', 'México'
]

# Z = Number of fires per State
FIRES_PER_STATE = [
[ 4,	  2,	  2,	  4,	  17,	  5,	  9,	  31,	    24,	  37,	  15,	  14,	  3,	  3,	  4,	  5,	  4 ],    # Baja California Sur
[ 11,	  15, 	18,	  32,	  45, 	6,	   5,	   23,	  8,	  26,	  23,	  20, 	45,	  50,  	27,	  12,	  13 ],   # Tabasco
[ 30,	  27,	  29,	  27,	  16,	  73,	   12,	 26,	  11,	  5,	  13,	  17,	  19,	  32,	  13,	  25,	  23 ],   # Tamaulipas
[ 97,	  77,	  54,	  37,	  19,	  34,	  6,	  18,	    5,	  28,	  21,	  29,	  3,	  15,	  21,	  5,	  13 ],   # Campeche
[ 49,	  35, 	69,	  41,	  8,	  66,  	18,	  25,	    15,	  9,	  46,	  54,	  50,	  34,	  24,	  25,	  43 ],   # Guanajuato
[ 13,	  12,	  8,	  28,	  8,	  18,	  14,	  42,	    33,	  28,	  104,	79,	  46,	  85,	  18,	  37,	  53 ],   # Aguascalientes
[ 24,	  48,	  67,	  38,	  30,	  98,	   53,	 30,	  13,	  13,  	54,	  47,	  44,	  42,	  44,	  51,	  19 ],   # Nuevo León
[ 19,	  66,	  31,	  60,	  36,	  17,	  34,	  65,	    17,	  11,	  81,	  84,	  54,	  55,	  33,	  38,	  48 ],   # Colima
[ 69,	  16,	  43,	  82,	  34,	  61,	   16,	 46,	  9,	  34,	  155,	103,	46, 	22, 	26, 	15, 	20 ],   # Yucatán
[ 23,	  29,	  87,	  29,	  21, 	66,	   53,   51,	  35,	  31, 	77,	  76,	  61, 	63,	  39,	  31, 	50 ],   # Sonora
[ 78,	  76,	  130,	57,	  51,	  78,	   58,   47,	  26,	  16,	  30,	  46,	  54, 	17,	  23,	  23, 	29 ],   # Sinaloa
[ 32,	  61,	  61,  	116,	35, 	129,	 34,	 91,	  16,	  7,  	40,	  36,	  36,	  73,	  38,	  51,	  26 ],   # Querétaro
[ 86,	  109,	125,	74,	  43,	  136,	 33,   65,	  13,	  18,	  86,	  84,	  56, 	65,	  67,	  78, 	83 ],   # San Luis Potosí
[ 37,	  58,	  54,	  116,	68,	  162,  92,	  20,	    55,	  32,	  101,	154,	86,	  68,	  76,	  53,	  68 ],   # Coahuila
[ 177,	137,	172,	150,	78,	  132,	 56,   71,	  40, 	81,	  41,	  64,	  50, 	59,	  68,	  33, 	43 ],   # Quintana Roo
[ 124,	45,	  67,	  135,	100,	155,	143,	100,	  36,	  57,  	105,	110,	83,	  69,	  70,	  103,	73 ],   # Nayarit
[ 57, 	75, 	100,	279,	52, 	133, 	 90,	 60,	  33,	  42,	  130,	129,	91, 	96,	  44,	  92,	  85 ],   # Zacatecas  
[ 35,	  63,	  93,	  374,	237,	304,	232,	208,	  102,	95,	  132,	193,	78,	  102,	141,	79,	  12 ],   # Baja California
[ 106,	136,	106,	196,	84,	  342,	149,	445,	  116,	30,	  384,	303,	101,	139,	75,	  70,	  151 ],  # Hidalgo
[ 403,	228,	266,	182,	140,	242,	148,	152,	  108,	106,	198,	228,	148,	178,	116,	154,	194 ],  # Morelos
[ 212,	148,	84,	  199,	200,	417,	 131,	 228,	  181,	130,	183,	238,	144,	230,	120,	158,	250 ],  # Veracruz
[ 414,	214,	401,	207,	186,	138,	162,	188,	  81,	  147,	136,	248,	294,	268,	255,	198,	179 ],  # Guerrero
[ 114,	147,	227,	298,	227,	334,	 216,	 378,	  243,	263,	278,	268,	174,	253,	199,	151,	112 ],  # Oaxaca
[ 99,	  146,	158,	223,	161,	404,	 208,	 296,	  185,	157,	402,	376,	266,	303,	181,	275,	113 ],  # Tlaxcala
[ 558,	371,	349,	237,	60,	  249,	270,	231,	  199,	68,   254,	509,	325,	252,	245,	270,	250 ],  # Durango
[ 234,	150,	307,	461,	285,	332,	253,	422,	  179,	320,	417,	390,	347,	454,	319,	278,	372 ],  # Chiapas
[ 241,	204,	205,	403,	316,	646,	 402,	 511,	  335,	156,	456,	519,	371,	353,	268,	313,	317 ],  # Puebla
[ 235,	437,	456,	717,	192,	646,	615,	710,	  442,	364,	991,	759,	526,	587,	630,	1031,	919 ],  # Jalisco
[ 320,	692,	1258,	646,	687,	1687,	1479,	1137,	  818,	252,	702,	808,	778,	702,	430,	657,	424 ],  # Chihuahua
[ 1381,	755,	777,	1195,	718,	1211,	896,	1180,	  487,	225,	826,	808,	621,	722,	613,	636,	570 ],  # Michoacán
[ 1397,	1406,	601,	1261,	863,	1373,	394,	1159,	  584,	502,	458,	653,	590,	544,	590,	896,	704 ],  # Ciudad de México
[ 1942,	1875,	2152,	1805,	1108,	2419,	1001,	2350,	  876,	519,	1483,	1450,	1380,	1475,	1096,	1494,	1045 ], # México
]

###############################################
# Functions
##############################################
def plotBestEquation3D(equation, difference):
  plt.figure(2)
  ax = Axes3D(fig2, auto_add_to_figure=False)
  fig2.add_axes(ax)
  ax.cla()
  ax.set_xlabel('Year')
  ax.set_ylabel('State')
  ax.set_zlabel('# of Fires')
  ax.set_title("Best Equation:")
  ax.grid(True)

  # Plot Reference Function
  # y_axis = np.vstack([*range(0, len(STATES), 1)])
  # ax.plot_wireframe(np.array(YEARS), y_axis, np.array(FIRES_PER_STATE))
  ax.plot_wireframe(X[0:len(YEARS)], Y, Z, cstride=1,rstride=1,color = 'g')

  # Plot Best Obtained Equation through Genetic Algo
  if equation is not None and difference is not None:
    z = getFuzzySetVector(equation)
    ax.plot_surface(X[0:len(YEARS)], Y, z[0:len(STATES), 0:len(YEARS)], rstride=1, cstride=1, linewidth=0, antialiased=False, alpha=0.8)
  
  return

def plotImprovement(bestDiff):
  global generation, generations, progress
  
  if bestDiff is not None:
    generations.append(generation)
    progress.append(bestDiff)
    generation += 1
  
  plt.figure(1)
  plt.subplot(1, 3, 1)
  plt.ylabel('Score')
  plt.xlabel('Generation')
  format_diff = "{:.2f}".format(bestDiff) if bestDiff is not None else 0
  plt.title("Score across generations\n Best Difference: " +str(format_diff)) 
  plt.grid()
  plt.plot(generations, progress, 'k')
  plt.draw()
  plt.pause(0.0001)
  return

def plotMembershipFunctions(equation):

  if equation:
    mfx, mfy = getFuzzySetPlotData(equation)

  colors = ["r", "g", "b", "c", "m", "y", "k", "purple", "coral", "peru", "pink", "darkcyan",\
      "rosybrown", "lightcoral", "indianred", "brown", "firebrick", "maroon", "salmon", "tomato",\
          "darksalmon", "olive", "chocolate", "sienna"]
  plt.figure(1)
  plt.subplot(1, 3, 2)
  plt.title("X Membership Functions") 
  plt.ylabel('y')
  plt.xlabel('x')
  if equation is not None:
    plt.cla()
    for i in range(len(mfx)):
      plt.plot(X, mfx[i])
  plt.grid()
  plt.draw()
  plt.pause(0.0001)
  
  plt.subplot(1, 3, 3)
  plt.title("Y Membership Functions") 
  plt.ylabel('y')
  plt.xlabel('x')
  if equation is not None:
    plt.cla()
    for i in range(mem):#len(mfy)):
      plt.plot(Y, mfy[i], colors[i])
  plt.grid()
  plt.draw()
  plt.pause(0.0001)

  return

def plotGraphs(coeffList):
  global bestDifference, bestEquation

  lowestIndex = 0
  lowestDiff = float('inf')
  lowestEquation = []
  i = 0
  for equation in coeffList:
    if equation[len(equation)-1] < lowestDiff:
      lowestIndex = i
      lowestDiff = equation[len(equation)-1]
      lowestEquation = equation.copy()

  #print("Best Equation Position: " +str(lowestIndex))
  #print("Best Difference: " +str(lowestDiff))
  #print("Equation Coefs: " +str(lowestEquation))
  
  if True:
    bestDifference = lowestDiff
    bestEquation = lowestEquation.copy()
    plotBestEquation3D(bestEquation, bestDifference)
    plotImprovement(bestDifference)
    plotMembershipFunctions(bestEquation)
  else:
    plotBestEquation3D(bestEquation, bestDifference)
    plotImprovement(lowestDiff)
    plotMembershipFunctions(bestEquation)

def getGraphVectors():
  
  size = max(len(YEARS), len(STATES))
  x = np.linspace(start = 0, stop = size, num = size)
  y = np.vstack(np.linspace(start = 0, stop = size, num = size))
  z = np.array(FIRES_PER_STATE)
  
  """
  y = np.vstack([*range(0, len(STATES), 1)])
  z = np.array(FIRES_PER_STATE)
  x = np.concatenate((np.array(YEARS), np.array([0 for _ in range(0, len(STATES)-len(YEARS))])), axis=None)
  """

  return x, y, z

def getFuzzySetPlotData(coefs):
  #mfyList, m, de = ([] for _ in range(mem))
  mfyList = ([])
  
  # Get m4, d4, m5, d5, m6 & d6...
  index = 0
  for i in range(mem):
    m = coefs[i+index]
    de = coefs[i+index+1]
    mfyList.append(np.exp((-(Y-m)**2)/(2*de**2)))
    index += 1

  mf = []
  for i in range(0, (len(coefs)-1-mem*2), (mem*4)-1):
    mx = coefs[i+mem*2]
    dex = coefs[i+mem*2+1]

    mfx = np.exp((-(X-mx)**2)/(2*dex**2))
    mf.append(mfx)
  
  return [mf, mfyList]

def getFuzzySetVector(coefs):
  #print(f"Len of Ccoefs == {len(coefs)}")
  a = b = 0
  #mfyList, m, de = ([] for _ in range(mem))
  mfyList = ([])
  
  # Get m4, d4, m5, d5, m6 & d6...
  index = 0
  for i in range(mem):
    m = coefs[i+index]
    de = coefs[i+index+1]
    mfyList.append(np.exp((-(Y-m)**2)/(2*de**2)))
    index += 1

  mf = []
  for i in range(0, (len(coefs)-1-mem*2), ((mem*4)-1)+(mem-3)):
    mx = coefs[i+mem*2]
    dex = coefs[i+mem*2+1]

    mfx = np.exp((-(X-mx)**2)/(2*dex**2))
    mf.append(mfx)

    infList = []
    for mfy in mfyList:
      infList.append(mfx*mfy)
    
    regList = []
    index = 0
    for j in range(mem):
      #print(f"P = {j+i+index+mem*2}")
      p = coefs[j+i+index]
      q = coefs[j+i+index]
      r = coefs[j+i+index]
      regList.append(infList[j]*(p*X + q + r))
      index += 2

    b += sum(infList)
    a += sum(regList)
  
  z = (a/b)

  return z

def fitnessFunction(coefsList):
  for coefs in coefsList:
    z = getFuzzySetVector(coefs)
    # Sum of the error of every point against the reference curve
    error = np.sum(abs(Z - z[0:len(STATES), 0:len(YEARS)]))
    coefs[len(coefs)-1] = float(error)

def parentsTournament(coefficientsList):
  participantsNum = int(POP_SIZE*TOURNAMENT_PERCENTAGE)
  tournaments = int(POP_SIZE/2)
  winners = []

  for i in range(tournaments):
    participants = sample(range(POP_SIZE), participantsNum)
    minScore = float('inf')
    winner = None
    for participant in participants:
      if coefficientsList[participant][len(coefficientsList[0])-1] < minScore:
        minScore = coefficientsList[participant][len(coefficientsList[0])-1]
        winner = coefficientsList[participant]
    winners.append(winner)
  
  return winners.copy()

def mateParents(father, mother):
  #print("Father: " +str(father))
  #print("Mother: " +str(mother))

  bitCut = randint(0, ((8*(len(father)-1))-1))
  coefIndex = bitCut//8
  indBitCut = bitCut - 8*coefIndex     # 0-55

  #print("Bit Cut: " +str(bitCut))
  #print("Individual Cut: " +str(indBitCut))
  #print("Father Byte: " +str(father[coefIndex]))
  #print("Mother Byte: " +str(mother[coefIndex]))

  fatherHighByte = father[coefIndex] & (((2**8)-1)-((2**(indBitCut+1))-1))
  fatherLowByte = father[coefIndex] & (2**(indBitCut+1))-1

  #print("Father High Byte: " +str(fatherHighByte))
  #print("Father Low Byte: " +str(fatherLowByte))

  motherHighByte = mother[coefIndex] & (((2**8)-1)-((2**(indBitCut+1))-1))
  motherLowByte =  mother[coefIndex] &  (2**(indBitCut+1))-1

  #print("Mother High Byte: " +str(motherHighByte))
  #print("Mother Low Byte: " +str(motherLowByte))

  child1Byte = fatherLowByte | motherHighByte
  child2Byte = motherLowByte | fatherHighByte

  #print("Child1 Byte: " +str(child1Byte))
  #print("Child2 Byte: " +str(child2Byte))

  X = father[:coefIndex]
  Y = father[coefIndex+1:]

  XX = mother[:coefIndex]
  YY = mother[coefIndex+1:]

  child1 = X + [child1Byte] + YY
  child2 = XX + [child2Byte] + Y
  
  #print("Child1: " +str(child1))
  #print("Child2: " +str(child2))

  return child1, child2
    
def mateAllParents(fathers, mothers):
  childs = []
  for parent in range(len(fathers)):
    child1, child2 = mateParents(fathers[parent], mothers[parent])
    childs.append(child1)
    childs.append(child2)
  return childs.copy()

def mutation(coefList):
  mutationNum = int(POP_SIZE*MUTATION_PERCENTAGE)
  participants = sample(range(POP_SIZE), mutationNum)
  
  for equation in participants:
    targetBit = randint(0, (8*(len(coefList[0])-1)-1))
    #print("\nEquation Before: " +str(coefList[equation]))
    #print("Target bit: " +str(targetBit))
    coefIndex = targetBit//8
    k = targetBit - 8*coefIndex
    #print("Specific bit: " +str(k))
    n = coefList[equation][coefIndex] 
    #print("Number before: " +str(n))
    #print ("Number After: " + str(n ^ (1 << k)))
    coefList[equation][coefIndex] = n ^ (1 << k)
    #print("Equation After: " +str(coefList[equation]))

def elitism(childs, mothers, fathers):
  newList = childs + mothers + fathers
  fitnessFunction(newList)
  bestEquations = sorted(newList, key=lambda x: x[len(childs[0])-1]) 

  return bestEquations[0:POP_SIZE].copy()

###############################################
# Main Program
##############################################
generation = 1
generations = []
progress = []
bestDifference = float('inf')
bestEquation = []

# Plot Initial Graphs
plt.ion()
fig1 = plt.figure(1, figsize=plt.figaspect(0.33))
fig2 = plt.figure(2)

X, Y, Z = getGraphVectors()
plotBestEquation3D(None, None)
plotImprovement(None)
plotMembershipFunctions(None)
plt.show() 
plt.pause(0.0001)


# Create Population 
coefficientsList = []
seed(SEED)
for i in range(POP_SIZE):
  coefficientsList.append([choice(range(10)) for i in range(parameters)] + [0]) ######

fitnessFunction(coefficientsList)

childs = []
for generation in range(GENERATIONS):
  if childs:
    coefficientsList = childs.copy()

  # Parents #1 - Obtain 50 Fathers
  fathers = parentsTournament(coefficientsList.copy())
  # Parents #2 - Obtain 50 Mothers
  mothers = parentsTournament(coefficientsList.copy())
  # Childs - Obtain 100 Childs
  childs = mateAllParents(fathers.copy(), mothers.copy())

  if MUTATION:
    mutation(childs)

  if ELITISM:
    childs = elitism(childs.copy(), mothers.copy(), fathers.copy())

  fitnessFunction(childs)
  plotGraphs(childs)

plt.show(block=True)
print("Done")
